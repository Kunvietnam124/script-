-- Decompiler will be improved soon!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2025-01-29 21:59:34
-- Luau version 6, Types version 3
-- Time taken: 0.006187 seconds

local _engine = _G._engine
local any_load_result1_upvr = _engine:load("Balls")
local Services_upvr = _engine.Services
local LocalPlayer_upvr = Services_upvr.Players.LocalPlayer
local OverlapParams_new_result1_upvr = OverlapParams.new()
OverlapParams_new_result1_upvr.MaxParts = 1
OverlapParams_new_result1_upvr.FilterType = Enum.RaycastFilterType.Include
OverlapParams_new_result1_upvr.FilterDescendantsInstances = any_load_result1_upvr.GetBalls()
any_load_result1_upvr.BallAdded:Connect(function() -- Line 19
	--[[ Upvalues[2]:
		[1]: OverlapParams_new_result1_upvr (readonly)
		[2]: any_load_result1_upvr (readonly)
	]]
	OverlapParams_new_result1_upvr.FilterDescendantsInstances = any_load_result1_upvr.GetBalls()
end)
local tbl_3_upvr = {}
local module_upvr_2 = {
	useExpensives = false;
	correspondingLimbs = {
		body = {"Head", "Torso", "UpperTorso", "LowerTorso"};
		arms = {"Torso", "RightUpperArm", "RightLowerArm", "RightHand", "LeftUpperArm", "LeftLowerArm", "LeftHand"};
		legs = {"Collide", "RightUpperLeg", "RightLowerLeg", "RightFoot", "RightBoot", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", "LeftBoot"};
	};
}
module_upvr_2.__index = module_upvr_2
local any_load_result1_upvr_2 = _engine:load("Maid")
function module_upvr_2.new(arg1) -- Line 60
	--[[ Upvalues[5]:
		[1]: Services_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: module_upvr_2 (readonly)
		[4]: any_load_result1_upvr_2 (readonly)
		[5]: tbl_3_upvr (readonly)
	]]
	assert(arg1, "HitboxClass.new() | table 'args' expected, got "..typeof(arg1))
	assert(Services_upvr.RunService:IsClient(), "HitboxClass | module can only be ran via client-side!")
	if LocalPlayer_upvr.Character.HumanoidRootPart and typeof(LocalPlayer_upvr.Character.HumanoidRootPart.Position) == "Vector3" then
		module_upvr_2:newBall(LocalPlayer_upvr.Character.HumanoidRootPart.Position)
	end
	local tbl = {
		hitboxes = {};
	}
	local limbs = arg1.limbs
	if not limbs then
		limbs = {}
		limbs[1] = "UpperTorso"
	end
	tbl.limbs = limbs
	tbl.limitTrip = arg1.limitTrip
	tbl.hit = false
	tbl.humanoid = arg1.humanoid or false
	tbl.maid = any_load_result1_upvr_2.new()
	local callback = arg1.callback
	if not callback then
		function callback() -- Line 75
		end
	end
	tbl.callback = callback
	local setmetatable_result1 = setmetatable(tbl, module_upvr_2)
	table.insert(tbl_3_upvr, setmetatable_result1)
	return setmetatable_result1
end
function module_upvr_2.onTouched(arg1, arg2, arg3) -- Line 82
	--[[ Upvalues[2]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: any_load_result1_upvr (readonly)
	]]
	if arg1.hit then
	else
		if arg2 and arg2:FindFirstAncestor(LocalPlayer_upvr.Name) then return end
		if arg2 and arg2.Parent and arg2.Parent:FindFirstChild("Humanoid") and arg2.Parent ~= LocalPlayer_upvr.Character and arg1.humanoid then
			if arg1.limitTrip and table.find(arg1.correspondingLimbs[arg1.limitTrip], arg3.Name) or not arg1.limitTrip then
				arg1.hit = true
				arg1:clear()
				arg1.callback(arg3, arg2, arg2.Parent)
				return
			end
		end
		if arg2 and any_load_result1_upvr.IsBall(arg2) then
			arg1.hit = true
			arg1:clear()
			arg1.callback(arg3, arg2)
		end
	end
end
local module_upvr = require(script:WaitForChild("Raycast", 100))
function module_upvr_2.init(arg1) -- Line 101
	--[[ Upvalues[4]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: any_load_result1_upvr (readonly)
		[3]: Services_upvr (readonly)
		[4]: module_upvr (readonly)
	]]
	assert(arg1.maid, "HitboxClass:init() | You must call .new() before running :init() !")
	local tbl_2 = {}
	for _, v in next, arg1.limbs do
		if LocalPlayer_upvr.Character[v] then
			table.insert(tbl_2, LocalPlayer_upvr.Character[v])
		end
	end
	for _, v_2 in next, any_load_result1_upvr.GetBalls() do
		if v_2 then
			table.insert({}, v_2)
		end
	end
	for _, v_3 in next, Services_upvr.Players:GetPlayers() do
		if v_3 and v_3 ~= LocalPlayer_upvr and v_3.Character and v_3.Character.Parent then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table.insert({}, v_3.Character)
		end
	end
	local RaycastParams_new_result1 = RaycastParams.new()
	RaycastParams_new_result1.FilterType = Enum.RaycastFilterType.Include
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	RaycastParams_new_result1.FilterDescendantsInstances = {}
	local any_new_result1_upvr = module_upvr.new(tbl_2, RaycastParams_new_result1)
	if arg1.useExpensives then
		any_new_result1_upvr:init()
	end
	arg1.hitbox = any_new_result1_upvr
	any_new_result1_upvr.onHit:Connect(function(arg1_2, arg2) -- Line 138
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:onTouched(arg1_2, arg2)
	end)
	if not arg1.useExpensives then
		for _, v_4_upvr in next, tbl_2 do
			if v_4_upvr and v_4_upvr.Parent then
				for _, v_5 in next, v_4_upvr:GetTouchingParts() do
					if v_5 then
						any_new_result1_upvr.onHit:Fire(v_5, v_4_upvr)
					end
				end
				arg1.maid[v_4_upvr.Name.."onTouched"] = v_4_upvr.Touched:Connect(function(arg1_3) -- Line 151
					--[[ Upvalues[2]:
						[1]: any_new_result1_upvr (readonly)
						[2]: v_4_upvr (readonly)
					]]
					any_new_result1_upvr.onHit:Fire(arg1_3, v_4_upvr)
				end)
				arg1.maid[v_4_upvr.Name.."onTouchEnded"] = v_4_upvr.TouchEnded:Connect(function(arg1_4) -- Line 155
					--[[ Upvalues[2]:
						[1]: any_new_result1_upvr (readonly)
						[2]: v_4_upvr (readonly)
					]]
					any_new_result1_upvr.onHit:Fire(arg1_4, v_4_upvr)
				end)
			end
		end
	end
end
function module_upvr_2.newBall(arg1, arg2) -- Line 163
	local Part_upvr = Instance.new("Part")
	Part_upvr.Transparency = 1
	Part_upvr.Name = "RF"
	Part_upvr.Size = Vector3.new(1.75, 1.75, 1.75)
	Part_upvr.Shape = Enum.PartType.Ball
	Part_upvr.Parent = workspace.game
	Part_upvr:SetAttribute("lastTouch", 0)
	Part_upvr:SetAttribute("network", 0)
	Part_upvr:SetAttribute("networkOwner", 0)
	Part_upvr:SetAttribute("possessor", 0)
	Part_upvr.CollisionGroup = "1_balls"
	Part_upvr.CanCollide = false
	Part_upvr.Position = arg2
	Instance.new("Folder", Part_upvr).Name = "design"
	Instance.new("Folder", Part_upvr).Name = "network"
	Instance.new("Folder", Part_upvr).Name = "properties"
	Instance.new("Folder", Part_upvr).Name = "replication"
	Instance.new("Attachment", Part_upvr).Name = "centre"
	Instance.new("VectorForce", Part_upvr).Name = "gravity"
	Instance.new("BodyGyro", Part_upvr).Name = "friction"
	task.spawn(function() -- Line 192
		--[[ Upvalues[1]:
			[1]: Part_upvr (readonly)
		]]
		task.delay(1, function() -- Line 193
			--[[ Upvalues[1]:
				[1]: Part_upvr (copied, readonly)
			]]
			Part_upvr:Destroy()
		end)
	end)
	return Part_upvr
end
function module_upvr_2.clear(arg1) -- Line 200
	--[[ Upvalues[1]:
		[1]: tbl_3_upvr (readonly)
	]]
	arg1.maid:DoCleaning()
	arg1.hitbox:clear()
	if table.find(tbl_3_upvr, arg1) then
		table.remove(tbl_3_upvr, table.find(tbl_3_upvr, arg1))
	end
end
function module_upvr_2.clearAll(arg1) -- Line 209
	--[[ Upvalues[1]:
		[1]: tbl_3_upvr (readonly)
	]]
	for _, v_6 in next, tbl_3_upvr do
		if v_6 then
			v_6:clear()
		end
	end
	table.clear(tbl_3_upvr)
end
return module_upvr_2
